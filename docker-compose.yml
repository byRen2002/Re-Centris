version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
    depends_on:
      - redis
      - postgres
    networks:
      - re-centris-network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - re-centris-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

  postgres:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=re_centris
      - POSTGRES_USER=re_centris
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - re-centris-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - re-centris-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - re-centris-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  re-centris-network:
    driver: bridge 